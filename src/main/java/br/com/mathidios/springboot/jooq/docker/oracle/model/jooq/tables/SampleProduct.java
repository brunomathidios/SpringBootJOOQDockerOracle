/*
 * This file is generated by jOOQ.
 */
package br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.tables;


import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.Indexes;
import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.Keys;
import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.Sample;
import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.tables.records.SampleProductRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SampleProduct extends TableImpl<SampleProductRecord> {

    private static final long serialVersionUID = -807317387;

    /**
     * The reference instance of <code>SAMPLE.SAMPLE_PRODUCT</code>
     */
    public static final SampleProduct SAMPLE_PRODUCT = new SampleProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SampleProductRecord> getRecordType() {
        return SampleProductRecord.class;
    }

    /**
     * The column <code>SAMPLE.SAMPLE_PRODUCT.ID_PRODUCT</code>.
     */
    public final TableField<SampleProductRecord, Long> ID_PRODUCT = createField("ID_PRODUCT", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_PRODUCT.NM_PRODUCT</code>.
     */
    public final TableField<SampleProductRecord, String> NM_PRODUCT = createField("NM_PRODUCT", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_PRODUCT.ID_RESTAURANT</code>.
     */
    public final TableField<SampleProductRecord, Long> ID_RESTAURANT = createField("ID_RESTAURANT", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_PRODUCT.PRICE_PRODUCT</code>.
     */
    public final TableField<SampleProductRecord, BigDecimal> PRICE_PRODUCT = createField("PRICE_PRODUCT", org.jooq.impl.SQLDataType.NUMERIC(18, 2), this, "");

    /**
     * Create a <code>SAMPLE.SAMPLE_PRODUCT</code> table reference
     */
    public SampleProduct() {
        this(DSL.name("SAMPLE_PRODUCT"), null);
    }

    /**
     * Create an aliased <code>SAMPLE.SAMPLE_PRODUCT</code> table reference
     */
    public SampleProduct(String alias) {
        this(DSL.name(alias), SAMPLE_PRODUCT);
    }

    /**
     * Create an aliased <code>SAMPLE.SAMPLE_PRODUCT</code> table reference
     */
    public SampleProduct(Name alias) {
        this(alias, SAMPLE_PRODUCT);
    }

    private SampleProduct(Name alias, Table<SampleProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private SampleProduct(Name alias, Table<SampleProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SampleProduct(Table<O> child, ForeignKey<O, SampleProductRecord> key) {
        super(child, key, SAMPLE_PRODUCT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sample.SAMPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ID_PRODUCT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SampleProductRecord> getPrimaryKey() {
        return Keys.ID_PRODUCT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SampleProductRecord>> getKeys() {
        return Arrays.<UniqueKey<SampleProductRecord>>asList(Keys.ID_PRODUCT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SampleProductRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SampleProductRecord, ?>>asList(Keys.ID_RESTAURANT_PRODUCT_FK);
    }

    public SampleRestaurant sampleRestaurant() {
        return new SampleRestaurant(this, Keys.ID_RESTAURANT_PRODUCT_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SampleProduct as(String alias) {
        return new SampleProduct(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SampleProduct as(Name alias) {
        return new SampleProduct(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SampleProduct rename(String name) {
        return new SampleProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SampleProduct rename(Name name) {
        return new SampleProduct(name, null);
    }
}
