/*
 * This file is generated by jOOQ.
 */
package br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.tables;


import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.Indexes;
import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.Keys;
import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.Sample;
import br.com.mathidios.springboot.jooq.docker.oracle.model.jooq.tables.records.SampleOrderRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SampleOrder extends TableImpl<SampleOrderRecord> {

    private static final long serialVersionUID = -1301222984;

    /**
     * The reference instance of <code>SAMPLE.SAMPLE_ORDER</code>
     */
    public static final SampleOrder SAMPLE_ORDER = new SampleOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SampleOrderRecord> getRecordType() {
        return SampleOrderRecord.class;
    }

    /**
     * The column <code>SAMPLE.SAMPLE_ORDER.ID_ORDER</code>.
     */
    public final TableField<SampleOrderRecord, Long> ID_ORDER = createField("ID_ORDER", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_ORDER.ID_USER</code>.
     */
    public final TableField<SampleOrderRecord, Long> ID_USER = createField("ID_USER", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_ORDER.ID_RESTAURANT</code>.
     */
    public final TableField<SampleOrderRecord, Long> ID_RESTAURANT = createField("ID_RESTAURANT", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_ORDER.IN_STATUS_ORDER</code>.
     */
    public final TableField<SampleOrderRecord, String> IN_STATUS_ORDER = createField("IN_STATUS_ORDER", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_ORDER.DT_ORDER</code>.
     */
    public final TableField<SampleOrderRecord, LocalDate> DT_ORDER = createField("DT_ORDER", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_ORDER.FL_AVAL</code>.
     */
    public final TableField<SampleOrderRecord, String> FL_AVAL = createField("FL_AVAL", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>SAMPLE.SAMPLE_ORDER.RATING</code>.
     */
    public final TableField<SampleOrderRecord, Byte> RATING = createField("RATING", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>SAMPLE.SAMPLE_ORDER</code> table reference
     */
    public SampleOrder() {
        this(DSL.name("SAMPLE_ORDER"), null);
    }

    /**
     * Create an aliased <code>SAMPLE.SAMPLE_ORDER</code> table reference
     */
    public SampleOrder(String alias) {
        this(DSL.name(alias), SAMPLE_ORDER);
    }

    /**
     * Create an aliased <code>SAMPLE.SAMPLE_ORDER</code> table reference
     */
    public SampleOrder(Name alias) {
        this(alias, SAMPLE_ORDER);
    }

    private SampleOrder(Name alias, Table<SampleOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private SampleOrder(Name alias, Table<SampleOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SampleOrder(Table<O> child, ForeignKey<O, SampleOrderRecord> key) {
        super(child, key, SAMPLE_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sample.SAMPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ID_ORDER_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SampleOrderRecord> getPrimaryKey() {
        return Keys.ID_ORDER_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SampleOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<SampleOrderRecord>>asList(Keys.ID_ORDER_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SampleOrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SampleOrderRecord, ?>>asList(Keys.ID_USER_ORDER_FK, Keys.ID_RESTAURANT_ORDER_FK);
    }

    public SampleUser sampleUser() {
        return new SampleUser(this, Keys.ID_USER_ORDER_FK);
    }

    public SampleRestaurant sampleRestaurant() {
        return new SampleRestaurant(this, Keys.ID_RESTAURANT_ORDER_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SampleOrder as(String alias) {
        return new SampleOrder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SampleOrder as(Name alias) {
        return new SampleOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SampleOrder rename(String name) {
        return new SampleOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SampleOrder rename(Name name) {
        return new SampleOrder(name, null);
    }
}
